## This code was generated by Claude in order to create synthetic
## dataset to train BERT+BiLSTM emotion classifier

import json
import random
from typing import List, Dict, Tuple

class SentimentDatasetGenerator:
    def __init__(self):
        self.emotions = ["sadness", "joy", "love", "anger", "fear", "surprise"]
        
        # Message templates for different emotions and conversation contexts
        self.message_templates = {
            "sadness": {
                "starters": [
                    "I've been feeling really down lately",
                    "Everything seems to be going wrong",
                    "I can't stop thinking about what happened",
                    "I feel so empty inside",
                    "Nothing feels right anymore"
                ],
                "responses": [
                    "I'm sorry you're going through this",
                    "That sounds really tough",
                    "I can understand why you'd feel that way",
                    "Do you want to talk about it?",
                    "I'm here for you"
                ],
                "endings": [
                    "I just feel so hopeless right now",
                    "I don't know how to get through this",
                    "Everything feels meaningless",
                    "I miss how things used to be",
                    "I feel like crying all the time",
                    "Nothing brings me happiness anymore"
                ]
            },
            "joy": {
                "starters": [
                    "I have amazing news to share!",
                    "You won't believe what just happened!",
                    "I'm so excited I can barely contain myself",
                    "Today has been absolutely wonderful",
                    "I feel like I'm on top of the world"
                ],
                "responses": [
                    "That's fantastic! Tell me more!",
                    "I'm so happy for you!",
                    "What happened?",
                    "That's wonderful news!",
                    "I love seeing you this happy!"
                ],
                "endings": [
                    "I can't stop smiling!",
                    "This is the best day ever!",
                    "I feel absolutely amazing!",
                    "Life is so beautiful right now!",
                    "I'm bursting with happiness!",
                    "Everything is perfect today!"
                ]
            },
            "love": {
                "starters": [
                    "I think I'm falling in love",
                    "My heart feels so full",
                    "I can't stop thinking about them",
                    "I've never felt this way before",
                    "They make me feel so special"
                ],
                "responses": [
                    "That's beautiful",
                    "Love is such a wonderful feeling",
                    "Tell me about them",
                    "How did you know?",
                    "I'm happy you found someone special"
                ],
                "endings": [
                    "I love them with all my heart",
                    "They're my everything",
                    "I can't imagine life without them",
                    "My heart belongs to them completely",
                    "I'm so deeply in love",
                    "They make my world complete"
                ]
            },
            "anger": {
                "starters": [
                    "I'm so frustrated right now",
                    "This is absolutely ridiculous",
                    "I can't believe they did that",
                    "I'm sick and tired of this",
                    "This makes my blood boil"
                ],
                "responses": [
                    "What happened?",
                    "That does sound frustrating",
                    "I can see why you're upset",
                    "Take a deep breath",
                    "Want to tell me about it?"
                ],
                "endings": [
                    "I'm absolutely furious!",
                    "This is completely unacceptable!",
                    "I'm so angry I could scream!",
                    "They've really crossed the line this time!",
                    "I'm done with all of this!",
                    "This makes me want to explode!"
                ]
            },
            "fear": {
                "starters": [
                    "I'm really worried about something",
                    "I have this terrible feeling",
                    "Something bad is going to happen",
                    "I can't shake this anxiety",
                    "I'm scared about what might happen"
                ],
                "responses": [
                    "What's making you worried?",
                    "It's okay to feel scared sometimes",
                    "Can you tell me more?",
                    "What are you afraid of?",
                    "Try to breathe slowly"
                ],
                "endings": [
                    "I'm terrified of what might happen",
                    "I can't stop shaking with fear",
                    "This scares me more than anything",
                    "I'm paralyzed by fear",
                    "I'm so afraid I can't think straight",
                    "The fear is overwhelming me"
                ]
            },
            "surprise": {
                "starters": [
                    "You'll never guess what just happened",
                    "I wasn't expecting this at all",
                    "This came out of nowhere",
                    "I'm completely shocked",
                    "I never saw this coming"
                ],
                "responses": [
                    "What happened?",
                    "Tell me everything!",
                    "I'm curious now",
                    "That sounds unexpected",
                    "What's the surprise?"
                ],
                "endings": [
                    "I can't believe this actually happened!",
                    "I'm completely stunned!",
                    "This is so unexpected!",
                    "I never would have imagined this!",
                    "What a shocking turn of events!",
                    "I'm absolutely amazed!"
                ]
            }
        }
        
        # Neutral bridging messages to maintain conversation flow
        self.neutral_messages = [
            "Really?",
            "I see",
            "Go on",
            "Tell me more",
            "What do you mean?",
            "How so?",
            "When did this happen?",
            "That's interesting",
            "I understand",
            "Hmm",
            "Yeah",
            "Okay",
            "Right",
            "I get it",
            "Makes sense"
        ]
        
        # Context-aware follow-up messages
        self.follow_ups = {
            "sadness": [
                "I've been there before",
                "It's hard when you feel like that",
                "Have you tried talking to someone?",
                "Maybe things will get better soon",
                "You're not alone in this"
            ],
            "joy": [
                "I love your energy!",
                "Your happiness is contagious",
                "That's so great to hear",
                "You deserve this happiness",
                "Keep that positive spirit!"
            ],
            "love": [
                "That's so sweet",
                "Love is beautiful",
                "You sound so happy",
                "That's romantic",
                "How long have you felt this way?"
            ],
            "anger": [
                "That would make anyone angry",
                "You have every right to be upset",
                "That's really not fair",
                "I'd be mad too",
                "Have you talked to them about it?"
            ],
            "fear": [
                "It's natural to feel scared",
                "Fear can be overwhelming",
                "Have you talked to anyone about this?",
                "Maybe it won't be as bad as you think",
                "Try to stay calm"
            ],
            "surprise": [
                "Wow, that is surprising",
                "Life is full of surprises",
                "That must have been quite a shock",
                "I didn't see that coming either",
                "What are you going to do now?"
            ]
        }

    def generate_sequence(self, target_emotion: str, length: int) -> List[str]:
        """Generate a coherent conversation sequence ending with target emotion"""
        sequence = []
        
        # Start with either the target emotion or a neutral/different emotion
        if random.random() < 0.7:  # 70% chance to start with target emotion context
            starter = random.choice(self.message_templates[target_emotion]["starters"])
        else:
            # Start with a different emotion and transition
            other_emotion = random.choice([e for e in self.emotions if e != target_emotion])
            starter = random.choice(self.message_templates[other_emotion]["starters"])
        
        sequence.append(starter)
        
        # Generate middle messages (length - 2, since we have starter and will add ending)
        for i in range(length - 2):
            if i == 0:  # First response
                if random.random() < 0.8:
                    # Contextual response
                    current_emotion = self.detect_likely_emotion(sequence[-1])
                    if current_emotion in self.message_templates:
                        msg = random.choice(self.message_templates[current_emotion]["responses"])
                    else:
                        msg = random.choice(self.neutral_messages)
                else:
                    msg = random.choice(self.neutral_messages)
            else:
                # Mix of neutral, follow-ups, and emotion-building messages
                rand_val = random.random()
                if rand_val < 0.3:
                    msg = random.choice(self.neutral_messages)
                elif rand_val < 0.6:
                    # Use follow-up related to target emotion to build context
                    msg = random.choice(self.follow_ups[target_emotion])
                else:
                    # Transition message that builds toward target emotion
                    if i >= length - 4:  # Last few messages before ending
                        msg = random.choice(self.message_templates[target_emotion]["responses"])
                    else:
                        current_emotion = self.detect_likely_emotion(sequence[-1])
                        if current_emotion in self.message_templates:
                            msg = random.choice(self.message_templates[current_emotion]["responses"])
                        else:
                            msg = random.choice(self.neutral_messages)
            
            sequence.append(msg)
        
        # End with target emotion
        ending = random.choice(self.message_templates[target_emotion]["endings"])
        sequence.append(ending)
        
        return sequence

    def detect_likely_emotion(self, message: str) -> str:
        """Simple emotion detection based on keywords"""
        message_lower = message.lower()
        
        emotion_keywords = {
            "sadness": ["sad", "down", "depressed", "empty", "hopeless", "crying", "miss"],
            "joy": ["happy", "excited", "amazing", "wonderful", "fantastic", "great", "smile"],
            "love": ["love", "heart", "special", "beautiful", "romantic", "adore"],
            "anger": ["angry", "mad", "frustrated", "furious", "ridiculous", "unacceptable"],
            "fear": ["scared", "afraid", "worried", "anxious", "terrified", "fear"],
            "surprise": ["surprised", "shocked", "unexpected", "amazed", "stunned", "wow"]
        }
        
        for emotion, keywords in emotion_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return emotion
        
        return "neutral"

    def generate_dataset(self, total_sequences: int = 6000) -> List[Dict]:
        """Generate the complete dataset"""
        dataset = []
        sequences_per_emotion = total_sequences // len(self.emotions)
        
        print(f"Generating {total_sequences} sequences ({sequences_per_emotion} per emotion)...")
        
        for emotion_idx, emotion in enumerate(self.emotions):
            print(f"Generating {emotion} sequences...")
            
            for i in range(sequences_per_emotion):
                # Random sequence length between 6-8
                length = random.randint(6, 8)
                
                # Generate sequence
                sequence = self.generate_sequence(emotion, length)
                
                # Create dataset entry
                entry = {
                    "sequence": sequence,
                    "emotion_label": emotion_idx,
                    "emotion_name": emotion,
                    "sequence_length": length
                }
                
                dataset.append(entry)
                
                if (i + 1) % 100 == 0:
                    print(f"  Generated {i + 1}/{sequences_per_emotion} {emotion} sequences")
        
        # Generate remaining sequences if total_sequences is not perfectly divisible
        remaining = total_sequences - len(dataset)
        if remaining > 0:
            print(f"Generating {remaining} additional sequences...")
            for i in range(remaining):
                emotion = random.choice(self.emotions)
                emotion_idx = self.emotions.index(emotion)
                length = random.randint(6, 8)
                sequence = self.generate_sequence(emotion, length)
                
                entry = {
                    "sequence": sequence,
                    "emotion_label": emotion_idx,
                    "emotion_name": emotion,
                    "sequence_length": length
                }
                dataset.append(entry)
        
        # Shuffle the dataset
        random.shuffle(dataset)
        
        print(f"Dataset generation complete! Total sequences: {len(dataset)}")
        return dataset

    def save_dataset(self, dataset: List[Dict], filename: str = "sentiment_sequences_dataset.json"):
        """Save dataset to JSON file"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(dataset, f, indent=2, ensure_ascii=False)
        print(f"Dataset saved to {filename}")

    def get_dataset_stats(self, dataset: List[Dict]):
        """Print dataset statistics"""
        emotion_counts = {}
        length_counts = {}
        
        for entry in dataset:
            emotion = entry["emotion_name"]
            length = entry["sequence_length"]
            
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
            length_counts[length] = length_counts.get(length, 0) + 1
        
        print("\n=== Dataset Statistics ===")
        print(f"Total sequences: {len(dataset)}")
        print("\nEmotion distribution:")
        for emotion, count in emotion_counts.items():
            print(f"  {emotion}: {count} sequences")
        
        print("\nSequence length distribution:")
        for length, count in sorted(length_counts.items()):
            print(f"  {length} messages: {count} sequences")

# Example usage
if __name__ == "__main__":
    # Set random seed for reproducibility
    random.seed(42)
    
    # Create generator
    generator = SentimentDatasetGenerator()
    
    # Generate dataset
    dataset = generator.generate_dataset(6000)
    
    # Display statistics
    generator.get_dataset_stats(dataset)
    
    # Show sample sequences
    print("\n=== Sample Sequences ===")
    for i in range(3):
        sample = dataset[i]
        print(f"\nSample {i+1} - Emotion: {sample['emotion_name']} (label: {sample['emotion_label']})")
        print("Sequence:")
        for j, message in enumerate(sample['sequence'], 1):
            print(f"  {j}. {message}")
    
    # Save dataset
    generator.save_dataset(dataset)
    
    print(f"\nDataset saved! You can now use this for training your BERT+BiLSTM model.")
    print("Each sequence has 6-8 coherent messages with the emotion label corresponding to the last message.")
